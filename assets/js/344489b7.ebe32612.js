"use strict";(self.webpackChunkxdc_subnet_docs=self.webpackChunkxdc_subnet_docs||[]).push([[586],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),h=i,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||a;return n?o.createElement(m,r(r({ref:t},d),{},{components:n})):o.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var u=2;u<a;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=n(7462),i=(n(7294),n(3905));const a={sidebar_label:"1. Launch a Subnet",sidebar_position:1},r="Launch a Subnet",l={unversionedId:"deployment/launch_subnet",id:"deployment/launch_subnet",title:"Launch a Subnet",description:"This is a guide for building your own XDC subnet with a bootnode, several master nodes, and customized genesis file.",source:"@site/docs/deployment/1_launch_subnet.md",sourceDirName:"deployment",slug:"/deployment/launch_subnet",permalink:"/xdc-subnet-docs/deployment/launch_subnet",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"1. Launch a Subnet",sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Deployment Guide",permalink:"/xdc-subnet-docs/category/deployment-guide"},next:{title:"2. Deploy Parent Chain Smart Contract",permalink:"/xdc-subnet-docs/deployment/deploy_parent_chain_smart_contract"}},s={},u=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"Step 1: Host your bootnode",id:"step-1-host-your-bootnode",level:2},{value:"Step 2: Generate your genesis file",id:"step-2-generate-your-genesis-file",level:2},{value:"Step 3: Host your subnet xdc-nodes",id:"step-3-host-your-subnet-xdc-nodes",level:2}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"launch-a-subnet"},"Launch a Subnet"),(0,i.kt)("p",null,"This is a guide for building your own XDC subnet with a bootnode, several master nodes, and customized genesis file."),(0,i.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")),(0,i.kt)("li",{parentName:"ul"},"Several host machines (>=3)")),(0,i.kt)("h2",{id:"step-1-host-your-bootnode"},"Step 1: Host your bootnode"),(0,i.kt)("p",null,"A subnet bootnode is a special node needed for the initialization and growth of the P2P network in a subnet. It does this by providing new nodes a list of active peers and their IP addresses. Bootnodes do not have any special privileges. They are responsible for network discovery rather than block validation or transaction processing."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Vist ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/XinFinOrg/XinFin-Node"},"https://github.com/XinFinOrg/XinFin-Node")," and clone the code. i.e ",(0,i.kt)("inlineCode",{parentName:"li"},"git clone https://github.com/XinFinOrg/XinFin-Node")),(0,i.kt)("li",{parentName:"ol"},"Check the ",(0,i.kt)("inlineCode",{parentName:"li"},"subnet")," directory. i.e ",(0,i.kt)("inlineCode",{parentName:"li"},"cd subnet")),(0,i.kt)("li",{parentName:"ol"},"Create an file with name of ",(0,i.kt)("inlineCode",{parentName:"li"},".env.bootnode")),(0,i.kt)("li",{parentName:"ol"},"Make sure below values are populated in the .env.bootnode file:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"EXTIP: Your host external IP address. This is useful if you want your bootnode to be discoveryed outside of your local network."),(0,i.kt)("li",{parentName:"ul"},"NET_RESTRICTING (Optional): This restrict p2p connectivity to an IP subnet. It will further isolate the network and prevents cross-connecting with other blockchain networks in case the nodes are reachable from the Internet. example value ",(0,i.kt)("inlineCode",{parentName:"li"},"172.16.254.0/24"),". With the this setting, bootnode will only allow connections from the 172.16.254.0/24 subnet, and will not attempt to connect to other nodes outside of the set IP range.")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose up bootnode"),". Copy the bootnode address which looks like ",(0,i.kt)("inlineCode",{parentName:"li"},"enode://blabla@[some-ip-address]:30301"))),(0,i.kt)("h2",{id:"step-2-generate-your-genesis-file"},"Step 2: Generate your genesis file"),(0,i.kt)("p",null,"In the context of XinFin XDC (XinFin Digital Contract), the genesis file refers to a configuration file that contains the initial parameters and settings for the blockchain network. It is an essential component used during the initialization process when creating a new XinFin blockchain network."),(0,i.kt)("p",null,"The genesis file defines various parameters, such as the initial block data, the initial set of validators, the block time, consensus algorithm settings, network ID, and other network-specific configurations. It serves as a blueprint for the blockchain's initial state and determines how the network will be set up and operate from the very beginning."),(0,i.kt)("p",null,"When launching a new XinFin XDC network, the genesis file is typically created and distributed to all participating nodes. Each node in the network references this file during the initialization process to ensure they have a consistent starting point for the blockchain's state. This ensures that all nodes agree on the initial conditions and can validate and agree upon subsequent transactions and blocks in a decentralized manner."),(0,i.kt)("p",null,"The genesis file is crucial for establishing the network's foundation and provides the initial rules and parameters for the XinFin XDC blockchain."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Vist ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/XinFinOrg/XinFin-Node"},"https://github.com/XinFinOrg/XinFin-Node")," and clone the code. i.e ",(0,i.kt)("inlineCode",{parentName:"li"},"git clone https://github.com/XinFinOrg/XinFin-Node")),(0,i.kt)("li",{parentName:"ol"},"Check the ",(0,i.kt)("inlineCode",{parentName:"li"},"subnet")," directory. i.e ",(0,i.kt)("inlineCode",{parentName:"li"},"cd subnet")),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose run puppeth")," and follow its instructions, specifically")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'when seeing "Please specify a network name to administer", enter the network name as you wish. e.g., network001.'),(0,i.kt)("li",{parentName:"ul"},'when seeing "What would you like to do?", choose "2. Configure new genesis".'),(0,i.kt)("li",{parentName:"ul"},'when seeing "Which consensus engine to use?", choose "3. XDPoS - delegated-proof-of-stake".'),(0,i.kt)("li",{parentName:"ul"},"as for other options, choose the options as you wish."),(0,i.kt)("li",{parentName:"ul"},'after the last step which is "Specify your chain/network ID if you want an explicit one", your genesis file is generated in your home directory and you can push "Ctrl-C" to exit ',(0,i.kt)("inlineCode",{parentName:"li"},"puppeth"),".")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Copy the genesis file from you host under the directory of ",(0,i.kt)("inlineCode",{parentName:"li"},"./puppeth")," (Keep this file, you will need it later)")),(0,i.kt)("h2",{id:"step-3-host-your-subnet-xdc-nodes"},"Step 3: Host your subnet xdc-nodes"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Copy the ",(0,i.kt)("inlineCode",{parentName:"li"},".env.example")," and name it to ",(0,i.kt)("inlineCode",{parentName:"li"},".env")),(0,i.kt)("li",{parentName:"ol"},"Replace the environment variables in the ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," with your own ones:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"INSTANCE_NAME: Name of the instance"),(0,i.kt)("li",{parentName:"ul"},'BOOTNODES: Addresses of the bootnodes, seperated by ",". You should already have this value when you spin up the bootnode from the section above'),(0,i.kt)("li",{parentName:"ul"},"PRIVATE_KEY: Primary key of the wallet. Note, if not provided, the node will run on a random key"),(0,i.kt)("li",{parentName:"ul"},"NETWORK_ID: The subnet network id. This shall be unique in your local network. Default to 102 if not provided."),(0,i.kt)("li",{parentName:"ul"},'RPC_API (Optional): The API that you would like to turn on. Supported values are "admin,db,eth,debug,miner,net,shh,txpool,personal,web3,XDPoS"'),(0,i.kt)("li",{parentName:"ul"},"EXTIP (Optional): NAT port mapping based on the external IP address."),(0,i.kt)("li",{parentName:"ul"},"SYNC_MODE (Optional): The node syncing mode. Available values are full or fast. Default to full."),(0,i.kt)("li",{parentName:"ul"},"LOG_LEVEL (Optional): {{Log level, from 1 to 5 where 1 produce least logs. default to 3 if not provided}}")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Provide your own ",(0,i.kt)("inlineCode",{parentName:"li"},"genesis.json")," file under the current directory. (The file generated from Step 2)"),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose up subnet"))))}c.isMDXComponent=!0}}]);