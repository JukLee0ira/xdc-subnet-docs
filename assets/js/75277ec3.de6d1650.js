"use strict";(self.webpackChunkxdc_subnet_docs=self.webpackChunkxdc_subnet_docs||[]).push([[716],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_label:"Specs",sidebar_position:2},o="Specifications",c={unversionedId:"compoments/parentchain_smart_contract/spec",id:"compoments/parentchain_smart_contract/spec",title:"Specifications",description:"There is a current sample subnet contract deployed at 0x203F7f019401a8B26aA071901dc9dDcfe3611FD4 on XDC devnet. This contract is under optimizing and auditioning.",source:"@site/docs/compoments/parentchain_smart_contract/spec.md",sourceDirName:"compoments/parentchain_smart_contract",slug:"/compoments/parentchain_smart_contract/spec",permalink:"/xdc-subnet-docs/compoments/parentchain_smart_contract/spec",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Specs",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Design",permalink:"/xdc-subnet-docs/compoments/parentchain_smart_contract/design"},next:{title:"Relayer",permalink:"/xdc-subnet-docs/category/relayer"}},l={},s=[{value:"APIs",id:"apis",level:2},{value:"Algorithms and Rules",id:"algorithms-and-rules",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"specifications"},"Specifications"),(0,a.kt)("p",null,"There is a current sample subnet contract deployed at ",(0,a.kt)("inlineCode",{parentName:"p"},"0x203F7f019401a8B26aA071901dc9dDcfe3611FD4")," on XDC devnet. This contract is under optimizing and auditioning."),(0,a.kt)("h2",{id:"apis"},"APIs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Functions that have access restriction to authorized client"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addMaster(address)"),": Grant access to target client"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"removeMaster(address)"),": Remove access to target client"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reviseValidatorSet(address[], int, int)"),": Update subnet block header signer list at destined height"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"receiveHeader(bytes[])"),": Validate and store subnet headers"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Functions that open for public access"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getHeader(byte32)"),": Return entire block header in RLP encoding format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getHeaderByNumber(int)"),": Return block hash and number at input height"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getHeaderConfirmationStatus(byte32)"),": Return block committing status"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getMainnetBlockNumber(byte32)"),": Return mainnet block number that processed the subnet block header"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getLatestBlocks()"),": Return latest committed block and submitted block")))),(0,a.kt)("h2",{id:"algorithms-and-rules"},"Algorithms and Rules"),(0,a.kt)("p",null,"Block header verification follows two principle rules:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Received block should have consistent round number and block number associated with its parent block."),(0,a.kt)("li",{parentName:"ol"},"Received block should have enough certificates signed by the list of block signers.")),(0,a.kt)("p",null,"Once a block header is checked and stored, the contract will examine whether there are 3 consecutive blocks that have 3 consetive round number. If that is the case, all of the direct ancestor blocks that are prior to these 3 consecutive blocks will be committed."))}u.isMDXComponent=!0}}]);