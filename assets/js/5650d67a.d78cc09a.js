"use strict";(self.webpackChunkxdc_subnet_docs=self.webpackChunkxdc_subnet_docs||[]).push([[483],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"2. Deploy Parent Chain Smart Contract",sidebar_position:2},i="Deploy Parent Chain Smart Contract",l={unversionedId:"deployment/deploy_parent_chain_smart_contract",id:"deployment/deploy_parent_chain_smart_contract",title:"Deploy Parent Chain Smart Contract",description:"For now, the user needs to use console to finish all of the operations below.",source:"@site/docs/deployment/2_deploy_parent_chain_smart_contract.md",sourceDirName:"deployment",slug:"/deployment/deploy_parent_chain_smart_contract",permalink:"/xdc-subnet-docs/deployment/deploy_parent_chain_smart_contract",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"2. Deploy Parent Chain Smart Contract",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"1. Launch a Subnet",permalink:"/xdc-subnet-docs/deployment/launch_subnet"},next:{title:"3. Deploy the Relayer",permalink:"/xdc-subnet-docs/deployment/relayer"}},c={},p=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Generate the smart contract",id:"generate-the-smart-contract",level:2},{value:"Upload it to the parent chain",id:"upload-it-to-the-parent-chain",level:2},{value:"Verify the deployment",id:"verify-the-deployment",level:2}],s={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-parent-chain-smart-contract"},"Deploy Parent Chain Smart Contract"),(0,a.kt)("p",null,"For now, the user needs to use console to finish all of the operations below. "),(0,a.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install ",(0,a.kt)("a",{parentName:"li",href:"https://trufflesuite.com/docs/truffle/how-to/install/"},"TruffleSuite")),(0,a.kt)("li",{parentName:"ul"},"Install ",(0,a.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git")),(0,a.kt)("li",{parentName:"ul"},"An XDC account that has over 0.00125 xdc token.")),(0,a.kt)("h2",{id:"generate-the-smart-contract"},"Generate the smart contract"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Clone contract repo\n\ngit clone https://github.com/XinFinOrg/XDC-Subnet.git\ncd XDC-Subnet\ngit checkout mainnet_contract\n\n# Compile contracts in the contracts folder and this automatically generates those json files in ./build/contracts\n\ntruffle compile\n\n# Test contract functionality in local test network with test scripts written under ./test\n\ntruffle test\n")),(0,a.kt)("h2",{id:"upload-it-to-the-parent-chain"},"Upload it to the parent chain"),(0,a.kt)("p",null,"There are three files required for launching the contract."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"config.py"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NODE_RPC"),": Targeted XDC devnet, testnet or mainnet node RPC link"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DEPLOY_INIT_JSON"),": Arguments to be provided into contract constructor"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SUBNET_CONTRACT_JSON"),": Path to compiled Subnet JSON file "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADER_CONTRACT_JSON"),": Path to compiled HeaderReader JSON file"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"DEPLOY_INIT_JSON"),":",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"genesis_header_encoded"),": RLP encoded Genesis XDC block bytes in hexstring format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"block1_header_encoded"),": RLP encoded XDC first block bytes in hexstring format"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"validators"),": List of initial validator addresses"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"threshold"),": The number of validator signatures to pass block verification"))),(0,a.kt)("li",{parentName:"ol"},"Create a ",(0,a.kt)("inlineCode",{parentName:"li"},".env")," file which contain a valid account privatekey")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Create and Activate python virtual env\n\npython3 -m venv xdc\nsource xdc/bin/activate\n\n# Git clone the modified web3\n\ngit clone https://github.com/span14/web3.py.git\ncd web3.py\ngit fetch \ngit checkout v5\n\n# Install modified web3\n\npython setup.py install\n\n# Back to parent folder and run\ncd ..\npython contract_deployment.py\n")),(0,a.kt)("h2",{id:"verify-the-deployment"},"Verify the deployment"),(0,a.kt)("p",null,"In the console, if the deployment is correct, there should be no error report and there will be a file ",(0,a.kt)("inlineCode",{parentName:"p"},"address.txt")," generated that stores the deployed smart address address."))}u.isMDXComponent=!0}}]);