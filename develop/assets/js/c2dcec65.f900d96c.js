"use strict";(self.webpackChunkxdc_subnet_docs=self.webpackChunkxdc_subnet_docs||[]).push([[268],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(r),b=o,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:o,l[1]=c;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},3483:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_label:"4. Blockchain Explorer",sidebar_position:4},l="Blockchain Explorer",c={unversionedId:"deployment/blockchain_explorer",id:"deployment/blockchain_explorer",title:"Blockchain Explorer",description:"You may optionally use an external blocks explorer if you require verbose browsing such as block detail, accounts browsing, contracts browsing. We can recommend Chainlens-free as one of the solution. Please follow the instructions as the previous link. You only need to pass one of the Subnet's RPC as a variable in the docker-compose command, which will most likely be NODEENDPOINT=http8545 or NODEENDPOINT=http8545.",source:"@site/docs/deployment/4_blockchain_explorer.md",sourceDirName:"deployment",slug:"/deployment/blockchain_explorer",permalink:"/xdc-subnet-docs/develop/deployment/blockchain_explorer",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"4. Blockchain Explorer",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"3. Common Issues and Troubleshooting",permalink:"/xdc-subnet-docs/develop/deployment/troubleshooting"},next:{title:"5. FAQ",permalink:"/xdc-subnet-docs/develop/deployment/faq"}},i={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"blockchain-explorer"},"Blockchain Explorer"),(0,o.kt)("p",null,"You may optionally use an external blocks explorer if you require verbose browsing such as block detail, accounts browsing, contracts browsing. We can recommend ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/web3labs/chainlens-free/tree/master/docker-compose"},"Chainlens-free")," as one of the solution. Please follow the instructions as the previous link. You only need to pass one of the Subnet's RPC as a variable in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," command, which will most likely be ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENDPOINT=http://localhost:8545")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENDPOINT=http://<MAIN_IP>:8545"),"."))}d.isMDXComponent=!0}}]);