"use strict";(self.webpackChunkxdc_subnet_docs=self.webpackChunkxdc_subnet_docs||[]).push([[268],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),b=o,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},3483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_label:"4. Blockchain Explorer",sidebar_position:4},l="Blockchain Explorer",i={unversionedId:"deployment/blockchain_explorer",id:"deployment/blockchain_explorer",title:"Blockchain Explorer",description:"You may optionally use an external blocks explorer if you require verbose browsing such as block detail, accounts browsing, contracts browsing. We can recommend Chainlens-free as one of the solution. Please follow the instructions as the previous link. You only need to pass one of the Subnet's RPC as a variable in the docker-compose command, which will most likely be NODEENDPOINT=http8545 or NODEENDPOINT=http8545.",source:"@site/docs/deployment/4_blockchain_explorer.md",sourceDirName:"deployment",slug:"/deployment/blockchain_explorer",permalink:"/xdc-subnet-docs/deployment/blockchain_explorer",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"4. Blockchain Explorer",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"3. Deployment and Configs Explanation",permalink:"/xdc-subnet-docs/deployment/configs_explanation"},next:{title:"5. Upgrading the Subnet",permalink:"/xdc-subnet-docs/deployment/upgrading_the_subnet"}},c={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"blockchain-explorer"},"Blockchain Explorer"),(0,o.kt)("p",null,"You may optionally use an external blocks explorer if you require verbose browsing such as block detail, accounts browsing, contracts browsing. We can recommend ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/web3labs/chainlens-free/tree/master/docker-compose"},"Chainlens-free")," as one of the solution. Please follow the instructions as the previous link. You only need to pass one of the Subnet's RPC as a variable in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," command, which will most likely be ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENDPOINT=http://localhost:8545")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"NODE_ENDPOINT=http://<MAIN_IP>:8545"),"."))}d.isMDXComponent=!0}}]);